"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
var fs = require("fs");
var path = require("path");
var parsers_1 = require("./parsers");
exports.DepType = parsers_1.DepType;
exports.LockfileType = parsers_1.LockfileType;
var package_lock_parser_1 = require("./parsers/package-lock-parser");
var yarn_lock_parse_1 = require("./parsers/yarn-lock-parse");
var get_node_runtime_version_1 = require("./get-node-runtime-version");
function buildDepTree(manifestFileContents, lockFileContents, includeDev, lockfileType) {
    if (includeDev === void 0) { includeDev = false; }
    return __awaiter(this, void 0, void 0, function () {
        var lockfileParser, unsupportedRuntimeError, manifestFile, lockFile;
        return __generator(this, function (_a) {
            if (!lockfileType) {
                lockfileType = parsers_1.LockfileType.npm;
            }
            switch (lockfileType) {
                case parsers_1.LockfileType.npm:
                    lockfileParser = new package_lock_parser_1.PackageLockParser();
                    break;
                case parsers_1.LockfileType.yarn:
                    // parsing yarn.lock is supported for Node.js v6 and higher
                    if (get_node_runtime_version_1.default() >= 6) {
                        lockfileParser = new yarn_lock_parse_1.YarnLockParser();
                    }
                    else {
                        unsupportedRuntimeError = new Error();
                        unsupportedRuntimeError.name = 'UnsupportedRuntimeError';
                        // tslint:disable:max-line-length
                        unsupportedRuntimeError.message = 'Parsing `yarn.lock` is not supported on Node.js version less than 6. Please upgrade your Node.js environment or use `package-lock.json`';
                        throw unsupportedRuntimeError;
                    }
                    break;
                default:
                    throw new Error("Unsupported lockfile type " + lockfileType + " provided.\n        Only 'npm' or 'yarn' is currently supported.");
            }
            manifestFile = parsers_1.parseManifestFile(manifestFileContents);
            if (!manifestFile.dependencies && !includeDev) {
                throw new Error("No 'dependencies' property in package.json");
            }
            lockFile = lockfileParser.parseLockFile(lockFileContents);
            return [2 /*return*/, lockfileParser.getDependencyTree(manifestFile, lockFile, includeDev)];
        });
    });
}
exports.buildDepTree = buildDepTree;
function buildDepTreeFromFiles(root, manifestFilePath, lockFilePath, includeDev) {
    if (includeDev === void 0) { includeDev = false; }
    return __awaiter(this, void 0, void 0, function () {
        var lockFileType, manifestFileFullPath, lockFileFullPath, manifestFileContents, lockFileContents;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!root || !manifestFilePath || !lockFilePath) {
                        throw new Error('Missing required parameters for buildDepTreeFromFiles()');
                    }
                    if (lockFilePath.endsWith('package-lock.json')) {
                        lockFileType = parsers_1.LockfileType.npm;
                    }
                    else if (lockFilePath.endsWith('yarn.lock')) {
                        lockFileType = parsers_1.LockfileType.yarn;
                    }
                    else {
                        throw new Error("Unknown lockfile " + lockFilePath + ".\n      Please provide either package-lock.json or yarn.lock.");
                    }
                    manifestFileFullPath = path.resolve(root, manifestFilePath);
                    lockFileFullPath = path.resolve(root, lockFilePath);
                    if (!fs.existsSync(manifestFileFullPath)) {
                        throw new Error("Target file package.json not found at location: " + manifestFileFullPath);
                    }
                    if (!fs.existsSync(lockFileFullPath)) {
                        throw new Error("Lockfile not found at location: " + lockFileFullPath);
                    }
                    manifestFileContents = fs.readFileSync(manifestFileFullPath, 'utf-8');
                    lockFileContents = fs.readFileSync(lockFileFullPath, 'utf-8');
                    return [4 /*yield*/, buildDepTree(manifestFileContents, lockFileContents, includeDev, lockFileType)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.buildDepTreeFromFiles = buildDepTreeFromFiles;
//# sourceMappingURL=index.js.map