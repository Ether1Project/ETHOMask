"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var DepType;
(function (DepType) {
    DepType["prod"] = "prod";
    DepType["dev"] = "dev";
})(DepType = exports.DepType || (exports.DepType = {}));
var LockfileType;
(function (LockfileType) {
    LockfileType["npm"] = "npm";
    LockfileType["yarn"] = "yarn";
})(LockfileType = exports.LockfileType || (exports.LockfileType = {}));
function parseManifestFile(manifestFileContents) {
    try {
        return JSON.parse(manifestFileContents);
    }
    catch (e) {
        throw new Error("package.json parsing failed with error " + e.message);
    }
}
exports.parseManifestFile = parseManifestFile;
function getTopLevelDeps(targetFile, includeDev) {
    var dependencies = [];
    var dependenciesIterator = _.entries(__assign({}, targetFile.dependencies, (includeDev ? targetFile.devDependencies : null)));
    for (var _i = 0, dependenciesIterator_1 = dependenciesIterator; _i < dependenciesIterator_1.length; _i++) {
        var _a = dependenciesIterator_1[_i], name = _a[0], version = _a[1];
        dependencies.push({
            dev: (includeDev && targetFile.devDependencies) ?
                !!targetFile.devDependencies[name] : false,
            name: name,
            version: version,
        });
    }
    return dependencies;
}
exports.getTopLevelDeps = getTopLevelDeps;
//# sourceMappingURL=index.js.map