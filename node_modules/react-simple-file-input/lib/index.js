'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var INPUT_FIELD_REF = 'inputField';

var READ_METHOD_ALIASES = {
  buffer: 'readAsArrayBuffer',
  binary: 'readAsBinaryString',
  dataUrl: 'readAsDataURL',
  text: 'readAsText'
};

var SUPPORTED_EVENTS = ['onLoadStart', 'onLoadEnd', 'onLoad', 'onAbort', 'onError'];

var UNSUPPORTED_BY_INPUT = {
  readAs: true,
  abortIf: true,
  cancelIf: true,
  onCancel: true
};

var FileInput = function (_Component) {
  _inherits(FileInput, _Component);

  function FileInput(props, context) {
    _classCallCheck(this, FileInput);

    var _this = _possibleConstructorReturn(this, (FileInput.__proto__ || Object.getPrototypeOf(FileInput)).call(this, props, context));

    _this.handleChange = _this.handleChange.bind(_this);
    return _this;
  }

  _createClass(FileInput, [{
    key: 'componentDidMount',
    value: function componentDidMount() {

      if (window && !window.File || !window.FileReader) {
        console.warn('Browser does not appear to support API react-simple-file-input relies upon');
      }
    }
  }, {
    key: 'handleChange',
    value: function handleChange(event) {
      var _this2 = this;

      var _props = this.props,
          readAs = _props.readAs,
          cancelIf = _props.cancelIf,
          onCancel = _props.onCancel,
          onProgress = _props.onProgress,
          abortIf = _props.abortIf,
          onChange = _props.onChange,
          multiple = _props.multiple;
      var files = event.target.files;


      if (onChange) {
        if (multiple) {
          onChange(files);
        } else {
          onChange(files[0]);
        }
      }

      if (readAs) {
        var _loop = function _loop(i) {
          var file = files[i];

          if (cancelIf && cancelIf(file)) {
            if (onCancel) {
              onCancel(file);
            }

            return {
              v: void 0
            };
          }

          var fileReader = new window.FileReader();

          var _loop2 = function _loop2(_i) {
            var handlerName = SUPPORTED_EVENTS[_i];

            if (_this2.props[handlerName]) {
              fileReader[handlerName.toLowerCase()] = function (fileReadEvent) {
                _this2.props[handlerName](fileReadEvent, file);
              };
            }
          };

          for (var _i = 0; _i < SUPPORTED_EVENTS.length; _i++) {
            _loop2(_i);
          }

          if (typeof abortIf !== 'undefined') {
            fileReader.onprogress = function (event) {

              if (abortIf(event, file)) {
                fileReader.abort();
              } else if (onProgress) {
                onProgress(event, file);
              }
            };
          } else if (onProgress) {
            fileReader.onprogress = onProgress;
          }

          fileReader[READ_METHOD_ALIASES[readAs]](file);
        };

        for (var i = 0; i < files.length; i++) {
          var _ret = _loop(i);

          if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var inputProps = {};

      for (var property in this.props) {
        if (this.props.hasOwnProperty(property) && !UNSUPPORTED_BY_INPUT[property]) {
          inputProps[property] = this.props[property];
        }
      }

      return _react2.default.createElement('input', _extends({}, inputProps, {
        type: 'file',
        ref: INPUT_FIELD_REF,
        onChange: this.handleChange
      }));
    }
  }]);

  return FileInput;
}(_react.Component);

FileInput.propTypes = {
  id: _propTypes2.default.string,
  className: _propTypes2.default.string,

  multiple: _propTypes2.default.bool,

  readAs: _propTypes2.default.oneOf(Object.keys(READ_METHOD_ALIASES)),

  onLoadStart: _propTypes2.default.func,
  onLoadEnd: _propTypes2.default.func,
  onLoad: _propTypes2.default.func,
  onAbort: _propTypes2.default.func,
  onCancel: _propTypes2.default.func,
  onChange: _propTypes2.default.func,
  onError: _propTypes2.default.func,
  onProgress: _propTypes2.default.func,

  cancelIf: _propTypes2.default.func,
  abortIf: _propTypes2.default.func
};

exports.default = FileInput;