{"version":3,"file":"inboundfilters.js","sourceRoot":"","sources":["../../src/integrations/inboundfilters.ts"],"names":[],"mappings":"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","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, SentryEvent } from '@sentry/types';\nimport { isRegExp } from '@sentry/utils/is';\nimport { logger } from '@sentry/utils/logger';\nimport { getEventDescription } from '@sentry/utils/misc';\nimport { includes } from '@sentry/utils/string';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** JSDoc */\ninterface InboundFiltersOptions {\n  ignoreErrors?: Array<string | RegExp>;\n  blacklistUrls?: Array<string | RegExp>;\n  whitelistUrls?: Array<string | RegExp>;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /** JSDoc */\n  private ignoreErrors?: Array<string | RegExp> = DEFAULT_IGNORE_ERRORS;\n  /** JSDoc */\n  private blacklistUrls?: Array<string | RegExp>;\n  /** JSDoc */\n  private whitelistUrls?: Array<string | RegExp>;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  public constructor(private readonly options: InboundFiltersOptions = {}) {\n    this.configureOptions();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor(async (event: SentryEvent) => {\n      const self = getCurrentHub().getIntegration(InboundFilters);\n      if (self) {\n        self.configureOptions();\n        if (self.shouldDropEvent(event)) {\n          return null;\n        }\n      }\n      return event;\n    });\n  }\n\n  /** JSDoc */\n  public shouldDropEvent(event: SentryEvent): boolean {\n    if (this.isIgnoredError(event)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n      return true;\n    }\n    if (this.isBlacklistedUrl(event)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`blacklistUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this.getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    if (!this.isWhitelistedUrl(event)) {\n      logger.warn(\n        `Event dropped due to not being matched by \\`whitelistUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this.getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    return false;\n  }\n\n  /** JSDoc */\n  public isIgnoredError(event: SentryEvent): boolean {\n    if (!this.ignoreErrors) {\n      return false;\n    }\n\n    return this.getPossibleEventMessages(event).some(message =>\n      // Not sure why TypeScript complains here...\n      (this.ignoreErrors as Array<RegExp | string>).some(pattern => this.isMatchingPattern(message, pattern)),\n    );\n  }\n\n  /** JSDoc */\n  public isBlacklistedUrl(event: SentryEvent): boolean {\n    // TODO: Use Glob instead?\n    if (!this.blacklistUrls) {\n      return false;\n    }\n    const url = this.getEventFilterUrl(event);\n    return !url ? false : this.blacklistUrls.some(pattern => this.isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  public isWhitelistedUrl(event: SentryEvent): boolean {\n    // TODO: Use Glob instead?\n    if (!this.whitelistUrls) {\n      return true;\n    }\n    const url = this.getEventFilterUrl(event);\n    return !url ? true : this.whitelistUrls.some(pattern => this.isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private isMatchingPattern(value: string, pattern: RegExp | string): boolean {\n    if (isRegExp(pattern)) {\n      return (pattern as RegExp).test(value);\n    } else if (typeof pattern === 'string') {\n      return includes(value, pattern);\n    } else {\n      return false;\n    }\n  }\n\n  /** JSDoc */\n  private configureOptions(): void {\n    if (this.options.ignoreErrors) {\n      this.ignoreErrors = [...DEFAULT_IGNORE_ERRORS, ...this.options.ignoreErrors];\n    }\n    if (this.options.blacklistUrls) {\n      this.blacklistUrls = [...this.options.blacklistUrls];\n    }\n    if (this.options.whitelistUrls) {\n      this.whitelistUrls = [...this.options.whitelistUrls];\n    }\n  }\n\n  /** JSDoc */\n  private getPossibleEventMessages(event: SentryEvent): string[] {\n    if (event.message) {\n      return [event.message];\n    } else if (event.exception) {\n      try {\n        // tslint:disable-next-line:no-unsafe-any\n        const { type, value } = (event as any).exception.values[0];\n        return [`${value}`, `${type}: ${value}`];\n      } catch (oO) {\n        logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n        return [];\n      }\n    } else {\n      return [];\n    }\n  }\n\n  /** JSDoc */\n  private getEventFilterUrl(event: SentryEvent): string | null {\n    try {\n      if (event.stacktrace) {\n        // tslint:disable-next-line:no-unsafe-any\n        return (event as any).stacktrace.frames[0].filename;\n      } else if (event.exception) {\n        // tslint:disable-next-line:no-unsafe-any\n        return (event as any).exception.values[0].stacktrace.frames[0].filename;\n      } else {\n        return null;\n      }\n    } catch (oO) {\n      logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n      return null;\n    }\n  }\n}\n"]}