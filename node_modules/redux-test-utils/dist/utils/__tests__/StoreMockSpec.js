'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _StoreMock = require('../StoreMock');

var _DispatchMock = require('../DispatchMock');

var DispatchMock = _interopRequireWildcard(_DispatchMock);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

describe('StoreMock', function () {
  describe('emptyStore', function () {
    var store = (0, _StoreMock.emptyStore)();

    describe('getState()', function () {
      it('returns empty state object', function () {
        expect(store.getState()).toEqual({});
      });
    });

    describe('subscribe', function () {
      it('is defined', function () {
        expect(_typeof(store.subscribe)).toBe('function');
      });
    });
  });

  describe('createMockStore', function () {
    describe('state', function () {
      describe('when not provided', function () {
        it('returns empty object', function () {
          expect((0, _StoreMock.createMockStore)().getState()).toEqual({});
        });
      });
      describe('when provided', function () {
        it('returns that state', function () {
          var state = 'state';
          expect((0, _StoreMock.createMockStore)(state).getState()).toEqual(state);
        });
      });
    });

    describe('subscribe', function () {
      it('is defined', function () {
        expect(_typeof((0, _StoreMock.createMockStore)().subscribe)).toBe('function');
      });
    });

    describe('dispatch', function () {
      it('uses dispatchMock', function () {
        var dispatch = 'dispatch function';
        DispatchMock.createMockDispatch = jest.fn().mockReturnValueOnce({ dispatch: dispatch });
        var store = (0, _StoreMock.createMockStore)();
        expect(store.dispatch).toBe(dispatch);
      });

      describe('getDispatchActions', function () {
        it('uses dispatchMock', function () {
          var getActions = 'getActions function';
          DispatchMock.createMockDispatch = jest.fn().mockReturnValueOnce({ getActions: getActions });
          var store = (0, _StoreMock.createMockStore)();
          expect(store.getActions).toBe(getActions);
        });
      });

      describe('getDispatchAction', function () {
        it('uses dispatchMock', function () {
          var getAction = 'getAction function';
          DispatchMock.createMockDispatch = jest.fn().mockReturnValueOnce({ getAction: getAction });
          var store = (0, _StoreMock.createMockStore)();
          expect(store.getAction).toBe(getAction);
        });
      });

      describe('isActionTypeDispatched', function () {
        it('uses dispatchMock', function () {
          var isActionTypeDispatched = 'isActionTypeDispatched function';
          DispatchMock.createMockDispatch = jest.fn().mockReturnValueOnce({ isActionTypeDispatched: isActionTypeDispatched });
          var store = (0, _StoreMock.createMockStore)();
          expect(store.isActionTypeDispatched).toBe(isActionTypeDispatched);
        });
      });

      describe('isActionDispatched', function () {
        it('uses dispatchMock', function () {
          var isActionDispatched = 'isActionTypeDispatched function';
          DispatchMock.createMockDispatch = jest.fn().mockReturnValueOnce({ isActionDispatched: isActionDispatched });
          var store = (0, _StoreMock.createMockStore)();
          expect(store.isActionDispatched).toBe(isActionDispatched);
        });
      });
    });
  });
});