'use strict';

var _DispatchMock = require('../DispatchMock');

describe('DispatchMock', function () {
  describe('getActions', function () {
    it('returns all dispatched actions', function () {
      var mock = (0, _DispatchMock.createMockDispatch)();
      var action1 = 'action1';
      var action2 = 'action2';
      mock.dispatch(action1);
      mock.dispatch(action2);

      expect(mock.getActions()).toEqual([action1, action2]);
    });
  });

  describe('getAction', function () {
    describe('when action is not dispatched', function () {
      it('returns undefined', function () {
        var mock = (0, _DispatchMock.createMockDispatch)();
        expect(mock.getAction('action name')).toBe(undefined);
      });
    });

    describe('when action is dispatched', function () {
      it('is returned', function () {
        var mock = (0, _DispatchMock.createMockDispatch)();
        var type = 'action type';
        var action = {
          type: type
        };
        mock.dispatch(action);
        expect(mock.getAction(type)).toEqual(action);
      });
    });

    describe('when several actions is dispatched', function () {
      it('returns action with given type', function () {
        var mock = (0, _DispatchMock.createMockDispatch)();
        var type = 'action type';
        var action = {
          type: type
        };
        mock.dispatch({ type: 'random action 1' });
        mock.dispatch(action);
        mock.dispatch({ type: 'random action 2' });

        expect(mock.getAction(type)).toEqual(action);
      });
    });
  });

  describe('isActionTypeDispatched', function () {
    describe('when action has not been dispatched', function () {
      it('returns false', function () {
        var mock = (0, _DispatchMock.createMockDispatch)();
        expect(mock.isActionTypeDispatched('not dispatched action type')).toBe(false);
      });
    });

    describe('when actions has been dispatched', function () {
      it('returns true', function () {
        var mock = (0, _DispatchMock.createMockDispatch)();
        var type = 'action type';
        var action = {
          type: type
        };
        mock.dispatch(action);
        expect(mock.isActionTypeDispatched(type)).toBe(true);
      });
    });
  });

  describe('isActionDispatched', function () {
    describe('when actions has not been dispatched', function () {
      it('returns false', function () {
        var mock = (0, _DispatchMock.createMockDispatch)();
        var action = {
          type: 'not dispatched action type'
        };
        expect(mock.isActionDispatched(action)).toBe(false);
      });
    });

    describe('when action has been dispatched', function () {
      describe('and all fields in action matches', function () {
        describe('when all subFields matches', function () {
          it('returns true', function () {
            var mock = (0, _DispatchMock.createMockDispatch)();
            var action = {
              type: 'type',
              field1: {
                subField1: 'subField1',
                subField2: 'subField2'
              },
              field2: 'field2'
            };
            var expectedAction = {
              type: 'type',
              field1: {
                subField1: 'subField1',
                subField2: 'subField2'
              },
              field2: 'field2'
            };
            mock.dispatch(action);
            expect(mock.isActionDispatched(expectedAction)).toBe(true);
          });
        });

        describe('when all subFields does not match', function () {
          it('returns false', function () {
            var mock = (0, _DispatchMock.createMockDispatch)();
            var action = {
              type: 'type',
              field1: {
                subField1: 'subField1',
                subField2: 'subField2'
              },
              field2: 'field2'
            };
            var expectedAction = {
              type: 'type',
              field1: {
                subField3: 'subField3'
              },
              field2: 'field2'
            };
            mock.dispatch(action);
            expect(mock.isActionDispatched(expectedAction)).toBe(false);
          });
        });
      });

      describe('and not all fields in action matches', function () {
        it('returns false', function () {
          var mock = (0, _DispatchMock.createMockDispatch)();
          var action = {
            type: 'type',
            field1: 'field1'
          };
          var notDispatchAction = {
            type: action.type,
            field1: 'not ' + action.field1
          };
          mock.dispatch(action);
          expect(mock.isActionDispatched(notDispatchAction)).toBe(false);
        });
      });
    });
  });
});