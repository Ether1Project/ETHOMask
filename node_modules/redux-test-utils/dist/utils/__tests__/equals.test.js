'use strict';

var _equals = require('../equals');

var _equals2 = _interopRequireDefault(_equals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('equals', function () {
  describe('one level', function () {
    describe('when all keys are the same', function () {
      it('returns true', function () {
        var object1 = {
          a: 'a',
          b: 'b'
        };
        var object2 = {
          a: 'a',
          b: 'b'
        };
        expect((0, _equals2.default)(object1, object2)).toBe(true);
      });
    });

    describe('when all keys are the not same', function () {
      it('returns false', function () {
        var object1 = {
          a: 'a',
          b: 'b'
        };
        var object2 = {
          a: 'a',
          b: 'c'
        };
        expect((0, _equals2.default)(object1, object2)).toBe(false);
      });
    });

    describe('when not the same number of keys', function () {
      it('returns false', function () {
        var object1 = {
          a: 'a',
          b: 'b',
          c: 'c'
        };
        var object2 = {
          a: 'a',
          b: 'b'
        };
        expect((0, _equals2.default)(object1, object2)).toBe(false);
      });
    });
  });

  describe('two levels', function () {
    describe('when all sub keys are the same', function () {
      it('returns true', function () {
        var object1 = {
          a: {
            b: 'b'
          }
        };
        var object2 = {
          a: {
            b: 'b'
          }
        };
        expect((0, _equals2.default)(object1, object2)).toBe(true);
      });
    });
  });

  describe('when all sub keys are the not same', function () {
    it('returns false', function () {
      var object1 = {
        a: {
          b: 'b'
        }
      };
      var object2 = {
        a: {
          c: 'c'
        }
      };
      expect((0, _equals2.default)(object1, object2)).toBe(false);
    });
  });

  describe('three levels', function () {
    describe('when all sub keys are the same', function () {
      it('returns true', function () {
        var object1 = {
          a: {
            b: {
              c: 'c'
            },
            d: {
              e: null
            }
          }
        };
        var object2 = {
          a: {
            b: {
              c: 'c'
            },
            d: {
              e: null
            }
          }
        };
        expect((0, _equals2.default)(object1, object2)).toBe(true);
      });
    });
  });

  describe('when all sub keys are the not same', function () {
    it('returns false', function () {
      var object1 = {
        a: {
          b: {
            c: 'c'
          },
          d: {
            e: null
          }
        }
      };
      var object2 = {
        a: {
          b: {
            d: 'd'
          },
          d: {
            e: null
          }
        }
      };
      expect((0, _equals2.default)(object1, object2)).toBe(false);
    });
  });
});