/* fluent-syntax@0.7.0 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define('fluent-syntax', ['exports'], factory) :
	(factory((global.FluentSyntax = {})));
}(this, (function (exports) { 'use strict';

/*
 * Base class for all Fluent AST nodes.
 *
 * All productions described in the ASDL subclass BaseNode, including Span and
 * Annotation.
 *
 */
class BaseNode {
  constructor() {}
}

/*
 * Base class for AST nodes which can have Spans.
 */
class SyntaxNode extends BaseNode {
  addSpan(start, end) {
    this.span = new Span(start, end);
  }
}

class Resource extends SyntaxNode {
  constructor(body = []) {
    super();
    this.type = "Resource";
    this.body = body;
  }
}

class Entry extends SyntaxNode {
  constructor() {
    super();
    this.type = "Entry";
    this.annotations = [];
  }

  addAnnotation(annot) {
    this.annotations.push(annot);
  }
}

class Message extends Entry {
  constructor(id, value = null, attributes = [], comment = null) {
    super();
    this.type = "Message";
    this.id = id;
    this.value = value;
    this.attributes = attributes;
    this.comment = comment;
  }
}

class Term extends Entry {
  constructor(id, value, attributes = [], comment = null) {
    super();
    this.type = "Term";
    this.id = id;
    this.value = value;
    this.attributes = attributes;
    this.comment = comment;
  }
}

class Pattern extends SyntaxNode {
  constructor(elements) {
    super();
    this.type = "Pattern";
    this.elements = elements;
  }
}

class TextElement extends SyntaxNode {
  constructor(value) {
    super();
    this.type = "TextElement";
    this.value = value;
  }
}

class Placeable extends SyntaxNode {
  constructor(expression) {
    super();
    this.type = "Placeable";
    this.expression = expression;
  }
}

class Expression extends SyntaxNode {
  constructor() {
    super();
    this.type = "Expression";
  }
}

class StringExpression extends Expression {
  constructor(value) {
    super();
    this.type = "StringExpression";
    this.value = value;
  }
}

class NumberExpression extends Expression {
  constructor(value) {
    super();
    this.type = "NumberExpression";
    this.value = value;
  }
}

class MessageReference extends Expression {
  constructor(id) {
    super();
    this.type = "MessageReference";
    this.id = id;
  }
}

class ExternalArgument extends Expression {
  constructor(id) {
    super();
    this.type = "ExternalArgument";
    this.id = id;
  }
}

class SelectExpression extends Expression {
  constructor(expression, variants) {
    super();
    this.type = "SelectExpression";
    this.expression = expression;
    this.variants = variants;
  }
}

class AttributeExpression extends Expression {
  constructor(id, name) {
    super();
    this.type = "AttributeExpression";
    this.id = id;
    this.name = name;
  }
}

class VariantExpression extends Expression {
  constructor(ref, key) {
    super();
    this.type = "VariantExpression";
    this.ref = ref;
    this.key = key;
  }
}

class CallExpression extends Expression {
  constructor(callee, args = []) {
    super();
    this.type = "CallExpression";
    this.callee = callee;
    this.args = args;
  }
}

class Attribute extends SyntaxNode {
  constructor(id, value) {
    super();
    this.type = "Attribute";
    this.id = id;
    this.value = value;
  }
}

class Variant extends SyntaxNode {
  constructor(key, value, def = false) {
    super();
    this.type = "Variant";
    this.key = key;
    this.value = value;
    this.default = def;
  }
}

class NamedArgument extends SyntaxNode {
  constructor(name, val) {
    super();
    this.type = "NamedArgument";
    this.name = name;
    this.val = val;
  }
}

class Identifier extends SyntaxNode {
  constructor(name) {
    super();
    this.type = "Identifier";
    this.name = name;
  }
}

class VariantName extends Identifier {
  constructor(name) {
    super(name);
    this.type = "VariantName";
  }
}

class BaseComment extends Entry {
  constructor(content) {
    super();
    this.type = "BaseComment";
    this.content = content;
  }
}

class Comment extends BaseComment {
  constructor(content) {
    super(content);
    this.type = "Comment";
  }
}

class GroupComment extends BaseComment {
  constructor(content) {
    super(content);
    this.type = "GroupComment";
  }
}
class ResourceComment extends BaseComment {
  constructor(content) {
    super(content);
    this.type = "ResourceComment";
  }
}

class Function extends Identifier {
  constructor(name) {
    super(name);
    this.type = "Function";
  }
}

class Junk extends Entry {
  constructor(content) {
    super();
    this.type = "Junk";
    this.content = content;
  }
}

class Span extends BaseNode {
  constructor(start, end) {
    super();
    this.type = "Span";
    this.start = start;
    this.end = end;
  }
}

class Annotation extends SyntaxNode {
  constructor(code, args = [], message) {
    super();
    this.type = "Annotation";
    this.code = code;
    this.args = args;
    this.message = message;
  }
}

class ParserStream {
  constructor(string) {
    this.string = string;
    this.iter = string[Symbol.iterator]();
    this.buf = [];
    this.peekIndex = 0;
    this.index = 0;

    this.iterEnd = false;
    this.peekEnd = false;

    this.ch = this.iter.next().value;
  }

  next() {
    if (this.iterEnd) {
      return undefined;
    }

    if (this.buf.length === 0) {
      this.ch = this.iter.next().value;
    } else {
      this.ch = this.buf.shift();
    }

    this.index++;

    if (this.ch === undefined) {
      this.iterEnd = true;
      this.peekEnd = true;
    }

    this.peekIndex = this.index;

    return this.ch;
  }

  current() {
    return this.ch;
  }

  currentIs(ch) {
    return this.ch === ch;
  }

  currentPeek() {
    if (this.peekEnd) {
      return undefined;
    }

    const diff = this.peekIndex - this.index;

    if (diff === 0) {
      return this.ch;
    }
    return this.buf[diff - 1];
  }

  currentPeekIs(ch) {
    return this.currentPeek() === ch;
  }

  peek() {
    if (this.peekEnd) {
      return undefined;
    }

    this.peekIndex += 1;

    const diff = this.peekIndex - this.index;

    if (diff > this.buf.length) {
      const ch = this.iter.next().value;
      if (ch !== undefined) {
        this.buf.push(ch);
      } else {
        this.peekEnd = true;
        return undefined;
      }
    }

    return this.buf[diff - 1];
  }

  getIndex() {
    return this.index;
  }

  getPeekIndex() {
    return this.peekIndex;
  }

  peekCharIs(ch) {
    if (this.peekEnd) {
      return false;
    }

    const ret = this.peek();

    this.peekIndex -= 1;

    return ret === ch;
  }

  resetPeek(pos) {
    if (pos) {
      if (pos < this.peekIndex) {
        this.peekEnd = false;
      }
      this.peekIndex = pos;
    } else {
      this.peekIndex = this.index;
      this.peekEnd = this.iterEnd;
    }
  }

  skipToPeek() {
    const diff = this.peekIndex - this.index;

    for (let i = 0; i < diff; i++) {
      this.ch = this.buf.shift();
    }

    this.index = this.peekIndex;
  }

  getSlice(start, end) {
    return this.string.substring(start, end);
  }
}

class ParseError extends Error {
  constructor(code, ...args) {
    super();
    this.code = code;
    this.args = args;
    this.message = getErrorMessage(code, args);
  }
}

/* eslint-disable complexity */
function getErrorMessage(code, args) {
  switch (code) {
    case "E0001":
      return "Generic error";
    case "E0002":
      return "Expected an entry start";
    case "E0003": {
      const [token] = args;
      return `Expected token: "${token}"`;
    }
    case "E0004": {
      const [range] = args;
      return `Expected a character from range: "${range}"`;
    }
    case "E0005": {
      const [id] = args;
      return `Expected message "${id}" to have a value or attributes`;
    }
    case "E0006": {
      const [id] = args;
      return `Expected term "${id}" to have a value`;
    }
    case "E0007":
      return "Keyword cannot end with a whitespace";
    case "E0008":
      return "The callee has to be a simple, upper-case identifier";
    case "E0009":
      return "The key has to be a simple identifier";
    case "E0010":
      return "Expected one of the variants to be marked as default (*)";
    case "E0011":
      return 'Expected at least one variant after "->"';
    case "E0012":
      return "Expected value";
    case "E0013":
      return "Expected variant key";
    case "E0014":
      return "Expected literal";
    case "E0015":
      return "Only one variant can be marked as default (*)";
    case "E0016":
      return "Message references cannot be used as selectors";
    case "E0017":
      return "Variants cannot be used as selectors";
    case "E0018":
      return "Attributes of messages cannot be used as selectors";
    case "E0019":
      return "Attributes of terms cannot be used as placeables";
    case "E0020":
      return "Unterminated string expression";
    default:
      return code;
  }
}

function includes(arr, elem) {
  return arr.indexOf(elem) > -1;
}

/* eslint no-magic-numbers: "off" */

const INLINE_WS = [" ", "\t"];
const SPECIAL_LINE_START_CHARS = ["}", ".", "[", "*"];

class FTLParserStream extends ParserStream {
  skipInlineWS() {
    while (this.ch) {
      if (!includes(INLINE_WS, this.ch)) {
        break;
      }
      this.next();
    }
  }

  peekInlineWS() {
    let ch = this.currentPeek();
    while (ch) {
      if (!includes(INLINE_WS, ch)) {
        break;
      }
      ch = this.peek();
    }
  }

  skipBlankLines() {
    while (true) {
      this.peekInlineWS();

      if (this.currentPeekIs("\n")) {
        this.skipToPeek();
        this.next();
      } else {
        this.resetPeek();
        break;
      }
    }
  }

  peekBlankLines() {
    while (true) {
      const lineStart = this.getPeekIndex();

      this.peekInlineWS();

      if (this.currentPeekIs("\n")) {
        this.peek();
      } else {
        this.resetPeek(lineStart);
        break;
      }
    }
  }

  skipIndent() {
    this.skipBlankLines();
    this.skipInlineWS();
  }

  expectChar(ch) {
    if (this.ch === ch) {
      this.next();
      return true;
    }

    if (ch === "\n") {
      // Unicode Character 'SYMBOL FOR NEWLINE' (U+2424)
      throw new ParseError("E0003", "\u2424");
    }

    throw new ParseError("E0003", ch);
  }

  expectIndent() {
    this.expectChar("\n");
    this.skipBlankLines();
    this.expectChar(" ");
    this.skipInlineWS();
  }

  takeCharIf(ch) {
    if (this.ch === ch) {
      this.next();
      return true;
    }
    return false;
  }

  takeChar(f) {
    const ch = this.ch;
    if (ch !== undefined && f(ch)) {
      this.next();
      return ch;
    }
    return undefined;
  }

  isCharIDStart(ch) {
    if (ch === undefined) {
      return false;
    }

    const cc = ch.charCodeAt(0);
    return (cc >= 97 && cc <= 122) || // a-z
           (cc >= 65 && cc <= 90); // A-Z
  }

  isEntryIDStart() {
    if (this.currentIs("-")) {
      this.peek();
    }

    const ch = this.currentPeek();
    const isID = this.isCharIDStart(ch);
    this.resetPeek();
    return isID;
  }

  isNumberStart() {
    if (this.currentIs("-")) {
      this.peek();
    }

    const cc = this.currentPeek().charCodeAt(0);
    const isDigit = cc >= 48 && cc <= 57; // 0-9
    this.resetPeek();
    return isDigit;
  }

  isCharPatternContinuation(ch) {
    if (ch === undefined) {
      return false;
    }

    return !includes(SPECIAL_LINE_START_CHARS, ch);
  }

  isPeekPatternStart() {
    this.peekInlineWS();
    const ch = this.currentPeek();

    // Inline Patterns may start with any char.
    if (ch !== undefined && ch !== "\n") {
      return true;
    }

    return this.isPeekNextLinePatternStart();
  }

  isPeekNextLineZeroFourStyleComment() {
    if (!this.currentPeekIs("\n")) {
      return false;
    }

    this.peek();

    if (this.currentPeekIs("/")) {
      this.peek();
      if (this.currentPeekIs("/")) {
        this.resetPeek();
        return true;
      }
    }

    this.resetPeek();
    return false;
  }

  // -1 - any
  //  0 - comment
  //  1 - group comment
  //  2 - resource comment
  isPeekNextLineComment(level = -1) {
    if (!this.currentPeekIs("\n")) {
      return false;
    }

    let i = 0;

    while (i <= level || (level === -1 && i < 3)) {
      this.peek();
      if (!this.currentPeekIs("#")) {
        if (i !== level && level !== -1) {
          this.resetPeek();
          return false;
        }
        break;
      }
      i++;
    }

    this.peek();
    if ([" ", "\n"].includes(this.currentPeek())) {
      this.resetPeek();
      return true;
    }

    this.resetPeek();
    return false;
  }

  isPeekNextLineVariantStart() {
    if (!this.currentPeekIs("\n")) {
      return false;
    }

    this.peek();

    this.peekBlankLines();

    const ptr = this.getPeekIndex();

    this.peekInlineWS();

    if (this.getPeekIndex() - ptr === 0) {
      this.resetPeek();
      return false;
    }

    if (this.currentPeekIs("*")) {
      this.peek();
    }

    if (this.currentPeekIs("[") && !this.peekCharIs("[")) {
      this.resetPeek();
      return true;
    }
    this.resetPeek();
    return false;
  }

  isPeekNextLineAttributeStart() {
    if (!this.currentPeekIs("\n")) {
      return false;
    }

    this.peek();

    this.peekBlankLines();

    const ptr = this.getPeekIndex();

    this.peekInlineWS();

    if (this.getPeekIndex() - ptr === 0) {
      this.resetPeek();
      return false;
    }

    if (this.currentPeekIs(".")) {
      this.resetPeek();
      return true;
    }

    this.resetPeek();
    return false;
  }

  isPeekNextLinePatternStart() {
    if (!this.currentPeekIs("\n")) {
      return false;
    }

    this.peek();

    this.peekBlankLines();

    const ptr = this.getPeekIndex();

    this.peekInlineWS();

    if (this.getPeekIndex() - ptr === 0) {
      this.resetPeek();
      return false;
    }

    if (!this.isCharPatternContinuation(this.currentPeek())) {
      this.resetPeek();
      return false;
    }

    this.resetPeek();
    return true;
  }

  skipToNextEntryStart() {
    while (this.ch) {
      if (this.currentIs("\n") && !this.peekCharIs("\n")) {
        this.next();
        if (this.ch === undefined ||
            this.isEntryIDStart() ||
            this.currentIs("#") ||
            (this.currentIs("/") && this.peekCharIs("/")) ||
            (this.currentIs("[") && this.peekCharIs("["))) {
          break;
        }
      }
      this.next();
    }
  }

  takeIDStart(allowTerm) {
    if (allowTerm && this.currentIs("-")) {
      this.next();
      return "-";
    }

    if (this.isCharIDStart(this.ch)) {
      const ret = this.ch;
      this.next();
      return ret;
    }

    const allowedRange = allowTerm ? "a-zA-Z-" : "a-zA-Z";
    throw new ParseError("E0004", allowedRange);
  }

  takeIDChar() {
    const closure = ch => {
      const cc = ch.charCodeAt(0);
      return ((cc >= 97 && cc <= 122) || // a-z
              (cc >= 65 && cc <= 90) || // A-Z
              (cc >= 48 && cc <= 57) || // 0-9
               cc === 95 || cc === 45); // _-
    };

    return this.takeChar(closure);
  }

  takeVariantNameChar() {
    const closure = ch => {
      const cc = ch.charCodeAt(0);
      return ((cc >= 97 && cc <= 122) || // a-z
              (cc >= 65 && cc <= 90) || // A-Z
              (cc >= 48 && cc <= 57) || // 0-9
               cc === 95 || cc === 45 || cc === 32); // _-<space>
    };

    return this.takeChar(closure);
  }

  takeDigit() {
    const closure = ch => {
      const cc = ch.charCodeAt(0);
      return (cc >= 48 && cc <= 57); // 0-9
    };

    return this.takeChar(closure);
  }
}

/*  eslint no-magic-numbers: [0]  */


function withSpan(fn) {
  return function(ps, ...args) {
    if (!this.withSpans) {
      return fn.call(this, ps, ...args);
    }

    let start = ps.getIndex();
    const node = fn.call(this, ps, ...args);

    // Don't re-add the span if the node already has it.  This may happen when
    // one decorated function calls another decorated function.
    if (node.span) {
      return node;
    }

    // Spans of Messages and Sections should include the attached Comment.
    if (node.type === "Message") {
      if (node.comment !== null) {
        start = node.comment.span.start;
      }
    }

    const end = ps.getIndex();
    node.addSpan(start, end);
    return node;
  };
}


class FluentParser {
  constructor({
    withSpans = true,
  } = {}) {
    this.withSpans = withSpans;

    // Poor man's decorators.
    [
      "getComment", "getMessage", "getAttribute", "getIdentifier",
      "getVariant", "getVariantName", "getNumber", "getPattern",
      "getTextElement", "getPlaceable", "getExpression",
      "getSelectorExpression", "getCallArg", "getString", "getLiteral",
      "getGroupCommentFromSection"
    ].forEach(
      name => this[name] = withSpan(this[name])
    );
  }

  parse(source) {
    const ps = new FTLParserStream(source);
    ps.skipBlankLines();

    const entries = [];

    while (ps.current()) {
      const entry = this.getEntryOrJunk(ps);

      if (entry === null) {
        // That happens when we get a 0.4 style section
        continue;
      }

      if (entry.type === "Comment" &&
        ps.lastCommentZeroFourSyntax && entries.length === 0) {
        const comment = new ResourceComment(entry.content);
        comment.span = entry.span;
        entries.push(comment);
      } else {
        entries.push(entry);
      }

      ps.lastCommentZeroFourSyntax = false;
      ps.skipBlankLines();
    }

    const res = new Resource(entries);

    if (this.withSpans) {
      res.addSpan(0, ps.getIndex());
    }

    return res;
  }

  parseEntry(source) {
    const ps = new FTLParserStream(source);
    ps.skipBlankLines();
    return this.getEntryOrJunk(ps);
  }

  getEntryOrJunk(ps) {
    const entryStartPos = ps.getIndex();

    try {
      return this.getEntry(ps);
    } catch (err) {
      if (!(err instanceof ParseError)) {
        throw err;
      }

      const errorIndex = ps.getIndex();
      ps.skipToNextEntryStart();
      const nextEntryStart = ps.getIndex();

      // Create a Junk instance
      const slice = ps.getSlice(entryStartPos, nextEntryStart);
      const junk = new Junk(slice);
      if (this.withSpans) {
        junk.addSpan(entryStartPos, nextEntryStart);
      }
      const annot = new Annotation(err.code, err.args, err.message);
      annot.addSpan(errorIndex, errorIndex);
      junk.addAnnotation(annot);
      return junk;
    }
  }

  getEntry(ps) {
    let comment;

    if (ps.currentIs("/") || ps.currentIs("#")) {
      comment = this.getComment(ps);

      // The Comment content doesn't include the trailing newline. Consume
      // this newline here to be ready for the next entry.  undefined stands
      // for EOF.
      ps.expectChar(ps.current() ? "\n" : undefined);
    }

    if (ps.currentIs("[")) {
      const groupComment = this.getGroupCommentFromSection(ps, comment);
      if (comment && this.withSpans) {
        // The Group Comment should start where the section comment starts.
        groupComment.span.start = comment.span.start;
      }
      return groupComment;
    }

    if (ps.isEntryIDStart() && (!comment || comment.type === "Comment")) {
      return this.getMessage(ps, comment);
    }

    if (comment) {
      return comment;
    }

    throw new ParseError("E0002");
  }

  getZeroFourStyleComment(ps) {
    ps.expectChar("/");
    ps.expectChar("/");
    ps.takeCharIf(" ");

    let content = "";

    while (true) {
      let ch;
      while ((ch = ps.takeChar(x => x !== "\n"))) {
        content += ch;
      }

      if (ps.isPeekNextLineZeroFourStyleComment()) {
        content += "\n";
        ps.next();
        ps.expectChar("/");
        ps.expectChar("/");
        ps.takeCharIf(" ");
      } else {
        break;
      }
    }

    const comment = new Comment(content);
    ps.lastCommentZeroFourSyntax = true;
    return comment;
  }

  getComment(ps) {
    if (ps.currentIs("/")) {
      return this.getZeroFourStyleComment(ps);
    }

    // 0 - comment
    // 1 - group comment
    // 2 - resource comment
    let level = -1;
    let content = "";

    while (true) {
      let i = -1;
      while (ps.currentIs("#") && (i < (level === -1 ? 2 : level))) {
        ps.next();
        i++;
      }

      if (level === -1) {
        level = i;
      }

      if (!ps.currentIs("\n")) {
        ps.expectChar(" ");
        let ch;
        while ((ch = ps.takeChar(x => x !== "\n"))) {
          content += ch;
        }
      }

      if (ps.isPeekNextLineComment(level, false)) {
        content += "\n";
        ps.next();
      } else {
        break;
      }
    }

    let Comment$$1;
    switch (level) {
      case 0:
        Comment$$1 = Comment;
        break;
      case 1:
        Comment$$1 = GroupComment;
        break;
      case 2:
        Comment$$1 = ResourceComment;
        break;
    }
    return new Comment$$1(content);
  }

  getGroupCommentFromSection(ps, comment) {
    ps.expectChar("[");
    ps.expectChar("[");

    ps.skipInlineWS();

    this.getVariantName(ps);

    ps.skipInlineWS();

    ps.expectChar("]");
    ps.expectChar("]");

    if (comment) {
      return new GroupComment(comment.content);
    }

    // A Section without a comment is like an empty Group Comment. Semantically
    // it ends the previous group and starts a new one.
    return new GroupComment("");
  }

  getMessage(ps, comment) {
    const id = this.getEntryIdentifier(ps);

    ps.skipInlineWS();

    let pattern;
    let attrs;

    // XXX Syntax 0.4 compatibility.
    // XXX Replace with ps.expectChar('=').
    if (ps.currentIs("=")) {
      ps.next();

      if (ps.isPeekPatternStart()) {
        ps.skipIndent();
        pattern = this.getPattern(ps);
      } else {
        ps.skipInlineWS();
      }
    }

    if (id.name.startsWith("-") && pattern === undefined) {
      throw new ParseError("E0006", id.name);
    }

    if (ps.isPeekNextLineAttributeStart()) {
      attrs = this.getAttributes(ps);
    }

    if (id.name.startsWith("-")) {
      return new Term(id, pattern, attrs, comment);
    }

    if (pattern === undefined && attrs === undefined) {
      throw new ParseError("E0005", id.name);
    }

    return new Message(id, pattern, attrs, comment);
  }

  getAttribute(ps) {
    ps.expectChar(".");

    const key = this.getIdentifier(ps);

    ps.skipInlineWS();
    ps.expectChar("=");

    if (ps.isPeekPatternStart()) {
      ps.skipIndent();
      const value = this.getPattern(ps);
      return new Attribute(key, value);
    }

    throw new ParseError("E0012");
  }

  getAttributes(ps) {
    const attrs = [];

    while (true) {
      ps.expectIndent();
      const attr = this.getAttribute(ps);
      attrs.push(attr);

      if (!ps.isPeekNextLineAttributeStart()) {
        break;
      }
    }
    return attrs;
  }

  getEntryIdentifier(ps) {
    return this.getIdentifier(ps, true);
  }

  getIdentifier(ps, allowTerm = false) {
    let name = "";
    name += ps.takeIDStart(allowTerm);

    let ch;
    while ((ch = ps.takeIDChar())) {
      name += ch;
    }

    return new Identifier(name);
  }

  getVariantKey(ps) {
    const ch = ps.current();

    if (!ch) {
      throw new ParseError("E0013");
    }

    const cc = ch.charCodeAt(0);

    if ((cc >= 48 && cc <= 57) || cc === 45) { // 0-9, -
      return this.getNumber(ps);
    }

    return this.getVariantName(ps);
  }

  getVariant(ps, hasDefault) {
    let defaultIndex = false;

    if (ps.currentIs("*")) {
      if (hasDefault) {
        throw new ParseError("E0015");
      }
      ps.next();
      defaultIndex = true;
      hasDefault = true;
    }

    ps.expectChar("[");

    const key = this.getVariantKey(ps);

    ps.expectChar("]");

    if (ps.isPeekPatternStart()) {
      ps.skipIndent();
      const value = this.getPattern(ps);
      return new Variant(key, value, defaultIndex);
    }

    throw new ParseError("E0012");
  }

  getVariants(ps) {
    const variants = [];
    let hasDefault = false;

    while (true) {
      ps.expectIndent();
      const variant = this.getVariant(ps, hasDefault);

      if (variant.default) {
        hasDefault = true;
      }

      variants.push(variant);

      if (!ps.isPeekNextLineVariantStart()) {
        break;
      }
    }

    if (!hasDefault) {
      throw new ParseError("E0010");
    }

    return variants;
  }

  getVariantName(ps) {
    let name = "";

    name += ps.takeIDStart(false);

    while (true) {
      const ch = ps.takeVariantNameChar();
      if (ch) {
        name += ch;
      } else {
        break;
      }
    }

    return new VariantName(name.trimRight());
  }

  getDigits(ps) {
    let num = "";

    let ch;
    while ((ch = ps.takeDigit())) {
      num += ch;
    }

    if (num.length === 0) {
      throw new ParseError("E0004", "0-9");
    }

    return num;
  }

  getNumber(ps) {
    let num = "";

    if (ps.currentIs("-")) {
      num += "-";
      ps.next();
    }

    num = `${num}${this.getDigits(ps)}`;

    if (ps.currentIs(".")) {
      num += ".";
      ps.next();
      num = `${num}${this.getDigits(ps)}`;
    }

    return new NumberExpression(num);
  }

  getPattern(ps) {
    const elements = [];
    ps.skipInlineWS();

    let ch;
    while ((ch = ps.current())) {

      // The end condition for getPattern's while loop is a newline
      // which is not followed by a valid pattern continuation.
      if (ch === "\n" && !ps.isPeekNextLinePatternStart()) {
        break;
      }

      if (ch === "{") {
        const element = this.getPlaceable(ps);
        elements.push(element);
      } else {
        const element = this.getTextElement(ps);
        elements.push(element);
      }
    }

    return new Pattern(elements);
  }

  getTextElement(ps) {
    let buffer = "";

    let ch;
    while ((ch = ps.current())) {
      if (ch === "{") {
        return new TextElement(buffer);
      }

      if (ch === "\n") {
        if (!ps.isPeekNextLinePatternStart()) {
          return new TextElement(buffer);
        }

        ps.next();
        ps.skipInlineWS();

        // Add the new line to the buffer
        buffer += ch;
        continue;
      }

      if (ch === "\\") {
        const ch2 = ps.next();

        if (ch2 === "{" || ch2 === '"') {
          buffer += ch2;
        } else {
          buffer += ch + ch2;
        }

      } else {
        buffer += ps.ch;
      }

      ps.next();
    }

    return new TextElement(buffer);
  }

  getPlaceable(ps) {
    ps.expectChar("{");
    const expression = this.getExpression(ps);
    ps.expectChar("}");
    return new Placeable(expression);
  }

  getExpression(ps) {
    if (ps.isPeekNextLineVariantStart()) {
      const variants = this.getVariants(ps);

      ps.expectIndent();

      return new SelectExpression(null, variants);
    }

    ps.skipInlineWS();

    const selector = this.getSelectorExpression(ps);

    ps.skipInlineWS();

    if (ps.currentIs("-")) {
      ps.peek();

      if (!ps.currentPeekIs(">")) {
        ps.resetPeek();
        return selector;
      }

      if (selector.type === "MessageReference") {
        throw new ParseError("E0016");
      }

      if (selector.type === "AttributeExpression" &&
          !selector.id.name.startsWith("-")) {
        throw new ParseError("E0018");
      }

      if (selector.type === "VariantExpression") {
        throw new ParseError("E0017");
      }

      ps.next();
      ps.next();

      ps.skipInlineWS();

      const variants = this.getVariants(ps);

      if (variants.length === 0) {
        throw new ParseError("E0011");
      }

      ps.expectIndent();

      return new SelectExpression(selector, variants);
    } else if (selector.type === "AttributeExpression" &&
               selector.id.name.startsWith("-")) {
      throw new ParseError("E0019");
    }

    return selector;
  }

  getSelectorExpression(ps) {
    const literal = this.getLiteral(ps);

    if (literal.type !== "MessageReference") {
      return literal;
    }

    const ch = ps.current();

    if (ch === ".") {
      ps.next();

      const attr = this.getIdentifier(ps);
      return new AttributeExpression(literal.id, attr);
    }

    if (ch === "[") {
      ps.next();

      const key = this.getVariantKey(ps);

      ps.expectChar("]");

      return new VariantExpression(literal, key);
    }

    if (ch === "(") {
      ps.next();

      const args = this.getCallArgs(ps);

      ps.expectChar(")");

      if (!/^[A-Z][A-Z_?-]*$/.test(literal.id.name)) {
        throw new ParseError("E0008");
      }

      const func = new Function(literal.id.name);
      if (this.withSpans) {
        func.addSpan(literal.span.start, literal.span.end);
      }

      return new CallExpression(
        func,
        args
      );
    }

    return literal;
  }

  getCallArg(ps) {
    const exp = this.getSelectorExpression(ps);

    ps.skipInlineWS();

    if (ps.current() !== ":") {
      return exp;
    }

    if (exp.type !== "MessageReference") {
      throw new ParseError("E0009");
    }

    ps.next();
    ps.skipInlineWS();

    const val = this.getArgVal(ps);

    return new NamedArgument(exp.id, val);
  }

  getCallArgs(ps) {
    const args = [];

    ps.skipInlineWS();

    while (true) {
      if (ps.current() === ")") {
        break;
      }

      const arg = this.getCallArg(ps);
      args.push(arg);

      ps.skipInlineWS();

      if (ps.current() === ",") {
        ps.next();
        ps.skipInlineWS();
        continue;
      } else {
        break;
      }
    }
    return args;
  }

  getArgVal(ps) {
    if (ps.isNumberStart()) {
      return this.getNumber(ps);
    } else if (ps.currentIs('"')) {
      return this.getString(ps);
    }
    throw new ParseError("E0012");
  }

  getString(ps) {
    let val = "";

    ps.expectChar('"');

    let ch;
    while ((ch = ps.takeChar(x => x !== '"' && x !== "\n"))) {
      val += ch;
    }

    if (ps.currentIs("\n")) {
      throw new ParseError("E0020");
    }

    ps.next();

    return new StringExpression(val);

  }

  getLiteral(ps) {
    const ch = ps.current();

    if (!ch) {
      throw new ParseError("E0014");
    }

    if (ch === "$") {
      ps.next();
      const name = this.getIdentifier(ps);
      return new ExternalArgument(name);
    }

    if (ps.isEntryIDStart()) {
      const name = this.getEntryIdentifier(ps);
      return new MessageReference(name);
    }

    if (ps.isNumberStart()) {
      return this.getNumber(ps);
    }

    if (ch === '"') {
      return this.getString(ps);
    }

    throw new ParseError("E0014");
  }
}

function indent(content) {
  return content.split("\n").join("\n    ");
}

function includesNewLine(elem) {
  return elem.type === "TextElement" && includes(elem.value, "\n");
}

function isSelectExpr(elem) {
  return elem.type === "Placeable"
    && elem.expression.type === "SelectExpression";
}

// Bit masks representing the state of the serializer.
const HAS_ENTRIES = 1;

class FluentSerializer {
  constructor({ withJunk = false } = {}) {
    this.withJunk = withJunk;
  }

  serialize(resource) {
    if (resource.type !== "Resource") {
      throw new Error(`Unknown resource type: ${resource.type}`);
    }

    let state = 0;
    const parts = [];

    for (const entry of resource.body) {
      if (entry.type !== "Junk" || this.withJunk) {
        parts.push(this.serializeEntry(entry, state));
        if (!(state & HAS_ENTRIES)) {
          state |= HAS_ENTRIES;
        }
      }
    }

    return parts.join("");
  }

  serializeEntry(entry, state = 0) {
    switch (entry.type) {
      case "Message":
      case "Term":
        return serializeMessage(entry);
      case "Comment":
        if (state & HAS_ENTRIES) {
          return `\n${serializeComment(entry)}\n\n`;
        }
        return `${serializeComment(entry)}\n\n`;
      case "GroupComment":
        if (state & HAS_ENTRIES) {
          return `\n${serializeGroupComment(entry)}\n\n`;
        }
        return `${serializeGroupComment(entry)}\n\n`;
      case "ResourceComment":
        if (state & HAS_ENTRIES) {
          return `\n${serializeResourceComment(entry)}\n\n`;
        }
        return `${serializeResourceComment(entry)}\n\n`;
      case "Junk":
        return serializeJunk(entry);
      default :
        throw new Error(`Unknown entry type: ${entry.type}`);
    }
  }

  serializeExpression(expr) {
    return serializeExpression(expr);
  }
}


function serializeComment(comment) {
  return comment.content.split("\n").map(
    line => line.length ? `# ${line}` : "#"
  ).join("\n");
}


function serializeGroupComment(comment) {
  return comment.content.split("\n").map(
    line => line.length ? `## ${line}` : "##"
  ).join("\n");
}


function serializeResourceComment(comment) {
  return comment.content.split("\n").map(
    line => line.length ? `### ${line}` : "###"
  ).join("\n");
}


function serializeJunk(junk) {
  return junk.content;
}


function serializeMessage(message) {
  const parts = [];

  if (message.comment) {
    parts.push(serializeComment(message.comment));
    parts.push("\n");
  }

  parts.push(serializeIdentifier(message.id));
  parts.push(" =");

  if (message.value) {
    parts.push(serializeValue(message.value));
  }

  for (const attribute of message.attributes) {
    parts.push(serializeAttribute(attribute));
  }

  parts.push("\n");
  return parts.join("");
}


function serializeAttribute(attribute) {
  const id = serializeIdentifier(attribute.id);
  const value = indent(serializeValue(attribute.value));
  return `\n    .${id} =${value}`;
}


function serializeValue(pattern) {
  const content = indent(serializePattern(pattern));

  const startOnNewLine =
    pattern.elements.some(includesNewLine)
    || pattern.elements.some(isSelectExpr);

  if (startOnNewLine) {
    return `\n    ${content}`;
  }

  return ` ${content}`;
}


function serializePattern(pattern) {
  return pattern.elements.map(serializeElement).join("");
}


function serializeElement(element) {
  switch (element.type) {
    case "TextElement":
      return serializeTextElement(element);
    case "Placeable":
      return serializePlaceable(element);
    default:
      throw new Error(`Unknown element type: ${element.type}`);
  }
}


function serializeTextElement(text) {
  return text.value;
}


function serializePlaceable(placeable) {
  const expr = placeable.expression;

  switch (expr.type) {
    case "Placeable":
      return `{${serializePlaceable(expr)}}`;
    case "SelectExpression":
      // Special-case select expression to control the whitespace around the
      // opening and the closing brace.
      return expr.expression
        // A select expression with a selector.
        ? `{ ${serializeSelectExpression(expr)}}`
        // A variant list without a selector.
        : `{${serializeSelectExpression(expr)}}`;
    default:
      return `{ ${serializeExpression(expr)} }`;
  }
}


function serializeExpression(expr) {
  switch (expr.type) {
    case "StringExpression":
      return serializeStringExpression(expr);
    case "NumberExpression":
      return serializeNumberExpression(expr);
    case "MessageReference":
      return serializeMessageReference(expr);
    case "ExternalArgument":
      return serializeExternalArgument(expr);
    case "AttributeExpression":
      return serializeAttributeExpression(expr);
    case "VariantExpression":
      return serializeVariantExpression(expr);
    case "CallExpression":
      return serializeCallExpression(expr);
    case "SelectExpression":
      return serializeSelectExpression(expr);
    default:
      throw new Error(`Unknown expression type: ${expr.type}`);
  }
}


function serializeStringExpression(expr) {
  return `"${expr.value}"`;
}


function serializeNumberExpression(expr) {
  return expr.value;
}


function serializeMessageReference(expr) {
  return serializeIdentifier(expr.id);
}


function serializeExternalArgument(expr) {
  return `$${serializeIdentifier(expr.id)}`;
}


function serializeSelectExpression(expr) {
  const parts = [];

  if (expr.expression) {
    const selector = `${serializeExpression(expr.expression)} ->`;
    parts.push(selector);
  }

  for (const variant of expr.variants) {
    parts.push(serializeVariant(variant));
  }

  parts.push("\n");
  return parts.join("");
}


function serializeVariant(variant) {
  const key = serializeVariantKey(variant.key);
  const value = indent(serializeValue(variant.value));

  if (variant.default) {
    return `\n   *[${key}]${value}`;
  }

  return `\n    [${key}]${value}`;
}


function serializeAttributeExpression(expr) {
  const id = serializeIdentifier(expr.id);
  const name = serializeIdentifier(expr.name);
  return `${id}.${name}`;
}


function serializeVariantExpression(expr) {
  const ref = serializeExpression(expr.ref);
  const key = serializeVariantKey(expr.key);
  return `${ref}[${key}]`;
}


function serializeCallExpression(expr) {
  const fun = serializeFunction(expr.callee);
  const args = expr.args.map(serializeCallArgument).join(", ");
  return `${fun}(${args})`;
}


function serializeCallArgument(arg) {
  switch (arg.type) {
    case "NamedArgument":
      return serializeNamedArgument(arg);
    default:
      return serializeExpression(arg);
  }
}


function serializeNamedArgument(arg) {
  const name = serializeIdentifier(arg.name);
  const value = serializeArgumentValue(arg.val);
  return `${name}: ${value}`;
}


function serializeArgumentValue(argval) {
  switch (argval.type) {
    case "StringExpression":
      return serializeStringExpression(argval);
    case "NumberExpression":
      return serializeNumberExpression(argval);
    default:
      throw new Error(`Unknown argument type: ${argval.type}`);
  }
}


function serializeIdentifier(identifier) {
  return identifier.name;
}


function serializeVariantName(VariantName) {
  return VariantName.name;
}


function serializeVariantKey(key) {
  switch (key.type) {
    case "VariantName":
      return serializeVariantName(key);
    case "NumberExpression":
      return serializeNumberExpression(key);
    default:
      throw new Error(`Unknown variant key type: ${key.type}`);
  }
}


function serializeFunction(fun) {
  return fun.name;
}

function parse(source, opts) {
  const parser = new FluentParser(opts);
  return parser.parse(source);
}

function serialize(resource, opts) {
  const serializer = new FluentSerializer(opts);
  return serializer.serialize(resource);
}

function lineOffset(source, pos) {
  // Subtract 1 to get the offset.
  return source.substring(0, pos).split("\n").length - 1;
}

function columnOffset(source, pos) {
  // Find the last line break starting backwards from the index just before
  // pos.  This allows us to correctly handle ths case where the character at
  // pos  is a line break as well.
  const fromIndex = pos - 1;
  const prevLineBreak = source.lastIndexOf("\n", fromIndex);

  // pos is a position in the first line of source.
  if (prevLineBreak === -1) {
    return pos;
  }

  // Subtracting two offsets gives length; subtract 1 to get the offset.
  return pos - prevLineBreak - 1;
}

exports.FluentParser = FluentParser;
exports.FluentSerializer = FluentSerializer;
exports.parse = parse;
exports.serialize = serialize;
exports.lineOffset = lineOffset;
exports.columnOffset = columnOffset;
exports.Resource = Resource;
exports.Entry = Entry;
exports.Message = Message;
exports.Term = Term;
exports.Pattern = Pattern;
exports.TextElement = TextElement;
exports.Placeable = Placeable;
exports.Expression = Expression;
exports.StringExpression = StringExpression;
exports.NumberExpression = NumberExpression;
exports.MessageReference = MessageReference;
exports.ExternalArgument = ExternalArgument;
exports.SelectExpression = SelectExpression;
exports.AttributeExpression = AttributeExpression;
exports.VariantExpression = VariantExpression;
exports.CallExpression = CallExpression;
exports.Attribute = Attribute;
exports.Variant = Variant;
exports.NamedArgument = NamedArgument;
exports.Identifier = Identifier;
exports.VariantName = VariantName;
exports.BaseComment = BaseComment;
exports.Comment = Comment;
exports.GroupComment = GroupComment;
exports.ResourceComment = ResourceComment;
exports.Function = Function;
exports.Junk = Junk;
exports.Span = Span;
exports.Annotation = Annotation;

Object.defineProperty(exports, '__esModule', { value: true });

})));
